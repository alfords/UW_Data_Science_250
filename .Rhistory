source('~/UW_Data_Science/Data_Science_250/week7/PregnancyExercise.R')
?solve
# A %*% x = b; x <- solve(A, b)
# inv(A) %*% b = x; x <- solve(A) %*% b
# Construct the matrix
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 1,  0,  0,  1) # III
r4 <- c( 0,  1,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
# Add code here
# Solve the equation:
?solve
source('~/UW_Data_Science/Data_Science_250/week7/PregnancyExercise.R')
A
source('~/.active-rstudio-document')
# Pregnancy Exercise
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
# A pregnancy test correctly predicted pregnancy 80%
# of the time among pregnant women.  10% of all the
# women were predicted pregnant but were actually not
# pregnant. The accuracy of the test was 89%.
# Problem statement
# I  Always:  1TP + 1FP + 1FN + 1TN = 1
# II	 Recall :  TP / (TP + FN) = 0.80;  -2TP+ 0FP + 8FN + 0TN = 0
# III	Accuracy:  (TP + TN)/(TP + FP + TN + FN) = 0.89;  1TP + 0FP + 0FN + 1TN =  0.89
# IV	False Positive:  FP = 0.1; 0TP + 1FP + 0FN + 0TN = 0.1
# Problem statement expressed in terms of linear algebra:
# We want to solve the linear equation:  Ax = b
# Where:
#     A is the matrix
#     x is a vector of TP, FP, FN, TN
#     b is the right-hand side of the linear equation
# --------------    --------
#   matrix A        vector b
# --------------    --------
# TP  FP  FN  TN  | b
# --------------    --------
#  1   1   1   1  |	1
# -2   0   8   0	|	0
#  1   0   0   1	|	0.89
#  0   1   0   0	|	0.1
# --------------    --------
?solve
# A %*% x = b; x <- solve(A, b)
# inv(A) %*% b = x; x <- solve(A) %*% b
# Construct the matrix
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 1,  0,  0,  1) # III
r4 <- c( 0,  1,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
# Add code here
# Solve the equation:
?solve
A
r1
r2
A %*% x = b; x <- solve(A, b)
source('~/UW_Data_Science/Data_Science_250/week7/ClassificationAccuracy.R')
x
source('~/UW_Data_Science/Data_Science_250/week7/ClassificationAccuracy.R')
r1 <- c( 1,  1,  1,  1) # I
r2 <- c( 0,  3,  0, -2) # II
r3 <- c( 1,  0, -4,  0) # III
r4 <- c(-3,  7,  7, -3) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
b <- c(1000, 0, 0, 0)
x <- solve(A, b)
names(x) <- c('TP', 'FP', 'FN', 'TN')
print(x)
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
# Construct the matrix
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 1,  0,  0,  1) # III
r4 <- c( 0,  1,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
b <- c(1,0,0.89,0.1)
x <- solve(A, b)
names(x) <- c('TP', 'FP', 'FN', 'TN')
print(x)
PPV <- 0.04/(0.04+0.1)
PPV
rm(list=ls())
cat("\014")
nodeNames <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
A <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
B <- c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0)
C <- c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0)
D <- c(0, 0, 1, 0, 0, 0, 1, 1, 0, 0) #        A  B  C  D  E  F  G  H  I  J
E <- c(0, 0, 0, 1, 0, 0, 0, 1, 0, 0) # E <- c(0, 0, 0, 1, 1, 0, 0, 1, 0, 0)
F <- c(0, 1, 1, 0, 0, 0, 0, 0, 0, 0)
G <- c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0)
H <- c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0)
I <- c(0, 0, 0, 1, 0, 0, 0, 0, 0, 1)
J <- c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0)
initialMatrix = matrix(c(A, B, C, D, E, F, G, H, I, J), ncol=10, byrow=TRUE)
colnames(initialMatrix) <- nodeNames
rownames(initialMatrix) <- nodeNames
initialMatrix
outDegree <- colSums(initialMatrix)
outDegree
inDegree <- rowSums(initialMatrix)
inDegree
outDegreeMatrix <- matrix(rep(outDegree, times=10), nrow=10, ncol=10, byrow=TRUE)
adjustedMatrix <- initialMatrix / outDegreeMatrix
adjustedMatrix[is.na(adjustedMatrix)] <- 0
round(adjustedMatrix, 1)
inDegree <- rowSums(adjustedMatrix)
round(inDegree, 1)
adjustedMatrix <- adjustedMatrix + 0.01 # 0.00
adjustedMatrix
importance <- inDegree # matrix(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ncol=1)
print(round(t(importance), 3))
importance <- adjustedMatrix %*% importance
importance <- importance/sum(importance)
print(round(t(importance), 3))
importance <- adjustedMatrix %*% importance
importance <- importance/sum(importance)
print(round(t(importance), 3))
importance <- adjustedMatrix %*% importance
importance <- importance/sum(importance)
print(round(t(importance), 3))
importance <- inDegree # matrix(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ncol=1)
for (iter in 1:1000)
{
importance <- adjustedMatrix %*% importance
importance <- importance/sum(importance)
}
print(round(t(importance), 3))
eigenVectors <- eigen(adjustedMatrix)$vector
eigenVector <- eigenVectors[, 1]
names(eigenVector) <- nodeNames
round(Re(eigenVector/sum(eigenVector)),3)
