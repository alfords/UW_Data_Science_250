################################################
Replace outliers in numeric vector x

x[(x > mean(x) + 2*sd(x)) | (x < mean(x) - 2*sd(x))] <- median(x)
x <- x[(x < mean(x) + 2*sd(x)) & (x > mean(x) - 2*sd(x))]
x <- x[(x > mean(x) + 2*sd(x)) | (x < mean(x) - 2*sd(x))]
x <- (x - min(x))/(max(x) - min(x))
################################################
Replace all low values in x with a lower bound:

x[x < mean(x) - 2*sd(x)] <- mean(x) - 2*sd(x)
x[x < mean(x) + 2*sd(x)] <- mean(x) - 2*sd(x)
x[x < mean(x) - 2*sd(x)] <- mean(x) + 2*sd(x)
x[x < mean(x) + 2*sd(x)] <- mean(x) + 2*sd(x)
################################################
x[x > mean(x) + 2*sd(x)] <- mean(x) + 2*sd(x)
This code will:

replace high outliers with an upper bound
replace low outliers with a lower bound
z-normalize the values
perform feature scaling
################################################
x <- (x - mean(x))/sd(x)
This code will:

replace high outliers with an upper bound
replace low outliers with a lower bound
z-normalize the values
perform feature scaling
################################################
Normalize vector x by Min-Max or Range (Feature Scaling)

x[(x > mean(x) + 2*sd(x)) | (x < mean(x) - 2*sd(x))] <- mean(x)
x <- x[(x < mean(x) + 2*sd(x)) & (x > mean(x) - 2*sd(x))]
x <- x[(x > mean(x) + 2*sd(x)) | (x < mean(x) - 2*sd(x))]
x <- (x - min(x))/(max(x) - min(x))
################################################
Keep only the outliers of vector x

x[(x > mean(x) + 2*sd(x)) | (x < mean(x) - 2*sd(x))] <- mean(x)
x <- x[(x < mean(x) + 2*sd(x)) & (x > mean(x) - 2*sd(x))]
x <- x[(x > mean(x) + 2*sd(x)) | (x < mean(x) - 2*sd(x))]
x <- (x - mean(x))/sd(x)
################################################
The following three vectors are the result of creating dummy variables (binarization):
isred:  c(1, 0, 1, 0, 1, 0, 0, 0)
ispink:  c(0, 0, 0, 1, 0, 0, 0, 1)
ismagenta: c(0, 1, 0, 0, 0, 0, 0, 0)

The original vector was called color and looked like this:
c("red", "magenta", "red", "pink", "red", "pink", "pink", "pink")
c("red", "magenta", "green", "pink", "red", "green", "green", "pink")
c("red", "magenta", "green", "pink", "red", "green", "green", "red")
c("red", "magenta", "red", "pink", "red", "green", "green", "pink")
c("red", "magenta", "red", "pink", "red", "pink")
c("red", "magenta", "red", "pink", "red", "red", "red", "pink")
none of these options
################################################
Remove from data frame x any row that has one or more NAs

x <- x == NA
x <- x[!complete.cases(x),]
x <- x != NA
x <- na.omit(x)
################################################
Keep only the rows in data frame x that have one or more NAs

x <- x == NA
x <- x[!complete.cases(x),]
x <- x != NA
x <- na.omit(x)
################################################
Simplify the vector x by relabeling categories:
x <- c("WA", "Washington", "Wash", "UT", "Utah", "Utah", "UT", "Utah", "IO")

x[x == "WA"] <- "Washington"; x[x == "WA"] <- "Wash"; x[x == "UT"] <- "Utah"
x[x == "Wash"] <- "Washington"; x[x == "WA"] <- "Wash"; x[x == "UT"] <- "Utah"
WA <- x[x == "Washington"]; WA <- x[x == "Wash"]; UT <- x[x == "Utah"]
x[x == "Washington"] <- "WA"; x[x == "Wash"] <- "WA"; x[x == "Utah"] <- "UT"
################################################



